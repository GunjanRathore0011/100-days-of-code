# Day 29 - LeetCode Progress Log

## ‚úÖ Problem 1: 2966. Divide Array Into Arrays With Max Difference

### üîó Problem Link  
[2966. Divide Array Into Arrays With Max Difference](https://leetcode.com/problems/divide-array-into-arrays-with-max-difference/)

---

### ‚úÖ Intuition  
We want to divide the array into groups of 3 such that the maximum difference in any group is less than or equal to `k`. Sorting helps make this greedy approach feasible.

---

### üõ†Ô∏è Approach  
1. Sort the array to keep nearby numbers together.
2. Iterate through the array and group elements in chunks of 3.
3. Check the absolute difference between the first and third element in each group.
4. If any group has a difference > k, return an empty array.
5. Otherwise, return all valid groups.

---

### ‚è±Ô∏è Complexity  
- **Time Complexity:** `O(n log n)` ‚Äì due to sorting  
- **Space Complexity:** `O(n)` ‚Äì to store grouped arrays

---

### üßæ Code  
```cpp
class Solution {
public:
    vector<vector<int>> divideArray(vector<int>& nums, int k) {
        vector<vector<int>> ans;
        vector<int> v;
        vector<vector<int>> empty;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++) {
            if(i % 3 == 0 && i != 0) {
                if(abs(v[0] - v[2]) > k) return empty;
                ans.push_back(v);
                v.clear();
            }
            v.push_back(nums[i]);
        }
        ans.push_back(v);
        if(abs(v[0] - v[2]) > k) return empty;
        return ans;
    }
};



üìù **Escape from theory prep ‚Äî solved a few problems to stay productive.**

## [49. Group Anagrams](https://leetcode.com/problems/group-anagrams/)

### Intuition
Used a hash map with sorted words as keys to group anagrams efficiently.

### Approach
Used a hash map with sorted words as keys to group anagrams efficiently.

### Complexity
- Time complexity: O(n * k log k), where n is the number of strings and k is the max string length
- Space complexity: O(n) for storing grouped anagrams

### Code (C++)
```cpp
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> mp;
        
        for(auto x: strs){
            string word = x;
            sort(word.begin(), word.end());
            mp[word].push_back(x);
        }
        vector<vector<string>> ans;
        for(auto ele: mp){
            ans.push_back(ele.second);
        }
        return ans;
    }
};
```

## [350. Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii/)

### Intuition
Used hash maps to count frequency of elements and find intersection.

### Approach
Used hash maps to count frequency of elements and find intersection.

### Complexity
- Time complexity: O(n + m), where n and m are the sizes of the two arrays
- Space complexity: O(min(n, m))

### Code (C++)
```cpp
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mp;
        vector<int> ans;

        for(int i=0;i<nums1.size();i++){
            mp[nums1[i]]++;
        }
        for(int num: nums2){
            if(mp.count(num)>0){
                if(mp[num]==0) continue;
                ans.push_back(num);
                mp[num]--;
            }
        }
        return ans;
    }
};
```

## [2089. Find Target Indices After Sorting Array](https://leetcode.com/problems/find-target-indices-after-sorting-array/)

### Intuition
Sorted array and collected indices where the value equals the target.

### Approach
Sorted array and collected indices where the value equals the target.

### Complexity
- Time complexity: O(n log n) due to sorting
- Space complexity: O(n) for storing indices

### Code (C++)
```cpp
class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<int> ans; 

        for(int i=0;i<nums.size();i++){
            if(nums[i]==target) ans.push_back(i);
        }

        return ans;
    }
};
```

