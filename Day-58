
# Day 58 - 100 Days of Code

## Problem: 1011. Capacity To Ship Packages Within D Days

**Link:** [https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/](https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/)

## Approach:
We use binary search to determine the minimum capacity needed to ship all packages within the given number of days.
- The search space is between the max weight and the sum of all weights.
- A helper function checks if a given capacity can ship the packages within the allowed days.

## Code:
```cpp
class Solution {
public:
    bool check(int mid, vector<int>& v, int days) {
        int n = v.size();
        int m = mid;
        int count = 1; // number of days it took to complete
        for (int i = 0; i < n; i++) {
            if (m >= v[i])
                m -= v[i];
            else {
                count++;
                m = mid;
                m -= v[i];
            }
        }
        return count <= days;
    }

    int shipWithinDays(vector<int>& weights, int days) {
        int lo = weights[0];
        int n = weights.size();
        int hi = 0;
        int ans = hi, mid;
        for (int i = 0; i < n; i++) {
            hi += weights[i];
            lo = max(lo, weights[i]);
        }
        while (lo <= hi) {
            mid = (lo + hi) / 2;
            if (check(mid, weights, days)) {
                ans = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return ans;
    }
};
```

## Learning:
- Efficiently solved using Binary Search on answer space.
- Key learning: Define correct boundaries for search space based on problem constraints.
