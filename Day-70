# Day 70 - 100 Days of Code

Today I solved a linked list problem that required rearranging nodes based on their position.

---

## ✅ Problem Solved:

### [328. Odd Even Linked List](https://leetcode.com/problems/odd-even-linked-list/)
- Rearranged the linked list so that all odd-positioned nodes come first, followed by even-positioned ones.
- Maintained relative order using pointer manipulation.
- Created a new linked list by separating odd and even nodes based on index.

```cpp
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        ListNode* temp=head;
        ListNode* newHead= new ListNode(temp->val);
        ListNode* odd=newHead;
        while(temp!=NULL && temp->next!=NULL){
            if(temp->next!=NULL) temp=temp->next->next;
            if(temp!=NULL){
                ListNode* newNode= new ListNode(temp->val);
                newHead->next=newNode;
                newHead=newHead->next;
            }
        }
        temp=head->next;
        while(temp!=NULL && temp->next!=NULL && temp->next->next!=NULL){
            newHead->next=temp;
            newHead=newHead->next;
            if(temp->next!=NULL) temp=temp->next->next;
        }
        newHead->next=temp;
        temp->next=NULL;
        return odd;
    }
};
```

---

## 🧠 Concepts Practiced:
- Linked list manipulation
- Pointer traversal and reconstruction
- Separating nodes based on index (odd/even)

---

## 🛠️ Language Used:
- C++

---

## 📌 Reflection:
Practiced traversing linked lists by position and reorganizing nodes to form a new list based on odd and even indices.

---

#100DaysOfCode #DSA #CPP #LinkedList #LeetCode #GunjanCodes
