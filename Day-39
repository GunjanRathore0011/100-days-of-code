# ðŸš€ Day 39 - 100 Days of Code

**Date:** June 28, 2025

## âœ… Problems Solved

1. [102. Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)
2. [222. Count Complete Tree Nodes](https://leetcode.com/problems/count-complete-tree-nodes/)
3. [897. Increasing Order Search Tree](https://leetcode.com/problems/increasing-order-search-tree/)
4. [1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree](https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/)

---

## ðŸ§  Code

### ðŸ”¹ 102. Binary Tree Level Order Traversal
```cpp
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root==NULL) return ans;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int n=q.size();
            vector<int> level;
            for(int i=0;i<n;i++){
                TreeNode* node=q.front();
                q.pop();
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
        return ans;
    }
};
```

---

### ðŸ”¹ 222. Count Complete Tree Nodes
```cpp
class Solution {
public:
    int cnt=0;

    void inorder(TreeNode* root){
        if(root==NULL) return;
        inorder(root->left);
        cnt++;
        inorder(root->right);
    }

    int countNodes(TreeNode* root) {
        inorder(root);
        return cnt;
    }
};
```

---

### ðŸ”¹ 897. Increasing Order Search Tree
```cpp
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& v){
        if(root==NULL) return;
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }

    TreeNode* increasingBST(TreeNode* root) {
        vector<int> v;
        inorder(root,v);
        TreeNode* new_root=new TreeNode(v[0]);
        TreeNode* prev=new_root;

        for(int i=1;i<v.size();i++){
            TreeNode* new_Node=new TreeNode(v[i]);
            prev->right=new_Node;
            prev=new_Node;
        }
        return new_root;
    }
};
```

---

### ðŸ”¹ 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree
```cpp
class Solution {
public:
    TreeNode* getTargetCopy(TreeNode* original, TreeNode* cloned, TreeNode* target) {
        if (original == NULL) return NULL;

        if (original == target)
            return cloned;

        TreeNode* left = getTargetCopy(original->left, cloned->left, target);
        if (left != NULL) return left;

        return getTargetCopy(original->right, cloned->right, target);
    }
};
```
