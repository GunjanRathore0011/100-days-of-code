
# ðŸ§  Day 53 of 100 Days of Code

Today I practiced problems related to Binary Search, Hash Maps, Sets, and Array manipulation. Here's the breakdown of each problem and optimized C++ solutions.

---

### âœ… 34. Find First and Last Position of Element in Sorted Array  
ðŸ”— [Leetcode Link](https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/)  
ðŸ§  **Concepts:** Binary Search

```cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = -1, last = -1;

        // Find first occurrence
        int low = 0, high = nums.size() - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] < target) low = mid + 1;
            else {
                if (nums[mid] == target) first = mid;
                high = mid - 1;
            }
        }

        // Find last occurrence
        low = 0, high = nums.size() - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] > target) high = mid - 1;
            else {
                if (nums[mid] == target) last = mid;
                low = mid + 1;
            }
        }

        return {first, last};
    }
};
```

---

### âœ… 1122. Relative Sort Array  
ðŸ”— [Leetcode Link](https://leetcode.com/problems/relative-sort-array/)  
ðŸ§  **Concepts:** Hash Maps, Sorting

```cpp
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        unordered_map<int, int> freq;
        for (int num : arr1) freq[num]++;

        vector<int> result;
        for (int num : arr2) {
            while (freq[num]--) result.push_back(num);
            freq.erase(num);
        }

        vector<int> remaining;
        for (auto& [num, count] : freq) {
            while (count--) remaining.push_back(num);
        }

        sort(remaining.begin(), remaining.end());
        result.insert(result.end(), remaining.begin(), remaining.end());
        return result;
    }
};
```

---

### âœ… 1346. Check If N and Its Double Exist  
ðŸ”— [Leetcode Link](https://leetcode.com/problems/check-if-n-and-its-double-exist/)  
ðŸ§  **Concepts:** Hash Sets

```cpp
class Solution {
public:
    bool checkIfExist(vector<int>& arr) {
        unordered_set<int> seen;
        for (int num : arr) {
            if (seen.count(2 * num) || (num % 2 == 0 && seen.count(num / 2)))
                return true;
            seen.insert(num);
        }
        return false;
    }
};
```

---

### âœ… 2215. Find the Difference of Two Arrays  
ðŸ”— [Leetcode Link](https://leetcode.com/problems/find-the-difference-of-two-arrays/)  
ðŸ§  **Concepts:** Sets

```cpp
class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());

        vector<int> diff1, diff2;
        for (int n : set1)
            if (!set2.count(n)) diff1.push_back(n);
        for (int n : set2)
            if (!set1.count(n)) diff2.push_back(n);

        return {diff1, diff2};
    }
};
```

---

### âœ… 1470. Shuffle the Array  
ðŸ”— [Leetcode Link](https://leetcode.com/problems/shuffle-the-array/)  
ðŸ§  **Concepts:** Array Manipulation

```cpp
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> result;
        for (int i = 0; i < n; ++i) {
            result.push_back(nums[i]);
            result.push_back(nums[i + n]);
        }
        return result;
    }
};
```

---

ðŸ”— **GitHub Repo:** [Your GitHub Link Here]

ðŸ“… _Progress: Day 53/100_  
ðŸ’» _Keep coding, stay consistent!_
