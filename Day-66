
# ‚úÖ LeetCode Solutions ‚Äì Day XX of 100DaysOfCode

This repo contains solutions to 4 recently solved LeetCode problems using C++.  
Each one helped sharpen logic, math, and edge case handling.

---

## üî∏ [3487. Maximum Unique Subarray Sum After Deletion](https://leetcode.com/problems/maximum-unique-subarray-sum-after-deletion/)
**Approach**:  
Use a `set` to collect only **unique** and **non-negative** values.  
Keep track of the **maximum negative** number if no positive values are found.

```cpp
class Solution {
public:
    int maxSum(vector<int>& nums) {
        set<int> s;
        int cnt = 0;
        int mNeg = INT_MIN;
        for(int num: nums){
            if(s.find(num)==s.end() && num>=0) {
                s.insert(num);
                cnt += num;
            }
            if(num < 0){
                mNeg = max(mNeg, num);
            }
        }
        if(s.size() == 0) return mNeg;
        return cnt;
    }
};
```

---

## üî∏ [128. Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/)
**Approach**:  
Sort the array. Skip duplicates. Count streaks of consecutive numbers.

```cpp
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() <= 1) return nums.size();
        sort(nums.begin(), nums.end());
        int cnt = 1, longS = 1;

        for(int i = 1; i < nums.size(); i++){ 
            if(nums[i] - nums[i - 1] == 0) continue;
            if(nums[i] - nums[i - 1] == 1){
                cnt++;
                longS = max(longS, cnt);
            } else {
                cnt = 1;
            }
        }    
        return longS;
    }
};
```

---

## üî∏ [2240. Number of Ways to Buy Pens and Pencils](https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/)
**Approach**:  
Try every possible count of pens, and for each, calculate how many pencils can be bought with remaining amount.

```cpp
class Solution {
public:
    long long waysToBuyPensPencils(int total, int cost1, int cost2) {
        if(cost1 > total && cost2 > total) return 1;
        long long way = 0;
        int i = 0;
        while(i * cost1 <= total){
            int remTotal = total - i * cost1;
            way += remTotal / cost2 + 1;
            i++;
        } 
        return way;
    }
};
```

---

## üî∏ [2177. Find Three Consecutive Integers That Sum to a Given Number](https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/)
**Approach**:  
Check if the number is divisible by 3. If yes, the answer is `mid-1, mid, mid+1`.

```cpp
class Solution {
public:
    vector<long long> sumOfThree(long long num) {
        if (num % 3 != 0) return {};
        long long mid = num / 3;
        return {mid - 1, mid , mid + 1};
    }
};
```

---

‚è≥ Keep learning. Keep solving.  
üìå *Stay consistent, small wins lead to big outcomes.*
